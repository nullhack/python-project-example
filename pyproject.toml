[tool.poetry]
name = "python_package_example"
version = "0.1.0"
description = "Python template with some awesome tools to quickstart any Python project"
authors = ["Eric Lopes <nullhack@users.noreply.github.com>"]
maintainers = ["Eric Lopes <nullhack@users.noreply.github.com>"]
license = "MIT"
repository = "https://github.com/nullhack/python-project-example"
documentation = "https://github.com/nullhack/python-project-example/tree/main/docs/api/"
readme = "README.md"
packages = [
    { include = "python_package_example" },
]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.18.1"
black = {version = "^22.3.0", allow-prereleases = true}
xdoctest = "^1.0.0"
poethepoet = "^0.16.4"
ruff = "^0.0.253"
pytest = "7.1.1"
pytest-html = "^3.1.1"
pytest-sugar = "^0.9.6"
pytest-reverse = "^1.5.0"
pytest-cov = "^3.0.0"
pytest-bdd = "^6.1.1"
mkdocs = "^1.4.2"
mkdocs-material = "^8.5.10"
mkdocs-gen-files = "^0.4.0"
mkdocs-awesome-pages-plugin = "^2.8.0"
mkapi = "^1.0.14"

[tool.poetry.scripts]
-c = "poethepoet:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
exclude = [
    "docs/",
    ".git",
    ".nox",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
]
ignore = ["E501"]
line-length = 79
select = [
    "C9",
    "E",
    "F",
    "W",
    "D",
    "G",
    "A",
    "PT",
    "S",
    "B",
    "ANN",
    "SIM",
    "I",
    "N",
]


[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
--verbose \
--maxfail=1 \
--reverse \
--color=yes \
--cov=python_package_example \
--html=docs/pytest_report.html \
--self-contained-html \
--cov-fail-under=100 \
--cov-report term-missing \
--cov-report html:docs/cov-report \
--doctest-modules \
--cov-config=pyproject.toml"""
testpaths = [
    "tests",
    "python_package_example"
]
python_files = ["*_test.py"]
python_functions = ["test_*"]
render_collapsed = true
bdd_features_base_dir = "features"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
    ]

[tool.poe.tasks]
install = "poetry install --only main"
install-dev = "poetry install"
run = "python -m python_package_example.python_module_example"
test = "pytest"
pre-commit = "pre-commit run --all-files"
lint-ruff = "ruff check **/*.py --fix"
lint-black = "black **/*.py"
lint = ["lint-black", "lint-ruff"]
doc = "mkdocs serve --use-directory-urls -f docs/mkdocs.yaml"
doc-html = "mkdocs build --no-directory-urls -f docs/mkdocs.yaml"
doc-publish = """mkdocs gh-deploy \
--config-file docs/mkdocs.yaml \
--no-directory-urls \
--remote-branch docs"""

[tool.poe.tasks.docker-build]
cmd = """
docker build 
--build-arg TESTBUILD=$no_test \
--build-arg BUILDTAG=$build_tag \
--build-arg BUILDPLATFORM=$build_platform \
--target $target \
-t python_package_example:$target-$build_tag ."""
help = "Build a docker image to test the project in an isolated environment"
args = [
  { name = "no-test", default = true, type = "boolean" }, 
  { name = "build-tag", default = "3-alpine" },
  { name = "build-platform", default = "linux/amd64" },
  { name = "target", default = "prod" },
]
