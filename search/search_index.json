{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml docs/ index.md","title":"Welcome to MkDocs"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml docs/ index.md","title":"Project layout"},{"location":"readme.html","text":"Python Project Example Python template with some awesome tools to quickstart any Python project Explore the docs \u00bb Report Bug \u00b7 Request Feature Table of Contents About The Project Getting Started Prerequisites Installation Usage Roadmap Contributing License Contact Acknowledgments About The Project Python template with some awesome tools to quickstart any Python project ( back to top ) Getting Started To run this project locally, you will need to install the prerequisites and follow the installation section. Prerequisites This Project depends on the following projects. * Poetry sh pip install --user --upgrade poetry Poe the Poet sh pip install --user --upgrade poethepoet Installation Clone the repo sh git clone https://github.com/nullhack/python-project-example cd python-project-example Install Poe the Poet and Poetry sh pip install --user --upgrade poethepoet poetry Install requirements for development sh poe install-dev Run tests sh poe test ( back to top ) Usage Some useful examples of how this project can be used: Install requirements sh poe install-dev Run tests sh poe test Run the project sh poe run Generate API documentation sh poe doc Build a docker image for tests sh poe docker-build --target test --build-tag 3.10-alpine docker run -ti --rm python_package_example:test-3.10-alpine Build a docker image to run the root files only without running any test sh poe docker-build --target prod --build-tag 3.10-alpine --no-test docker run -ti --rm python_package_example:prod-3.10-alpine For more examples, please refer to the Documentation ( back to top ) Roadmap [x] Add tests [x] Add code coverage [x] Improve documentation [ ] Include more tests See the open issues for a full list of proposed features (and known issues). ( back to top ) Contributing Any contributions you make are greatly appreciated . If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again! Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request ( back to top ) Contact Eric Lopes - @nullhack - nullhack@users.noreply.github.com Project Link: https://github.com/nullhack/python-project-example/ ( back to top ) Acknowledgments This project was created using cookiecutter and NullHack's python-project-template: NullHack's python-project-template ( back to top ) License Distributed under the MIT License. See LICENSE for more information. ( back to top )","title":"Readme"},{"location":"readme.html#about-the-project","text":"Python template with some awesome tools to quickstart any Python project ( back to top )","title":"About The Project"},{"location":"readme.html#getting-started","text":"To run this project locally, you will need to install the prerequisites and follow the installation section.","title":"Getting Started"},{"location":"readme.html#prerequisites","text":"This Project depends on the following projects. * Poetry sh pip install --user --upgrade poetry Poe the Poet sh pip install --user --upgrade poethepoet","title":"Prerequisites"},{"location":"readme.html#installation","text":"Clone the repo sh git clone https://github.com/nullhack/python-project-example cd python-project-example Install Poe the Poet and Poetry sh pip install --user --upgrade poethepoet poetry Install requirements for development sh poe install-dev Run tests sh poe test ( back to top )","title":"Installation"},{"location":"readme.html#usage","text":"Some useful examples of how this project can be used: Install requirements sh poe install-dev Run tests sh poe test Run the project sh poe run Generate API documentation sh poe doc Build a docker image for tests sh poe docker-build --target test --build-tag 3.10-alpine docker run -ti --rm python_package_example:test-3.10-alpine Build a docker image to run the root files only without running any test sh poe docker-build --target prod --build-tag 3.10-alpine --no-test docker run -ti --rm python_package_example:prod-3.10-alpine For more examples, please refer to the Documentation ( back to top )","title":"Usage"},{"location":"readme.html#roadmap","text":"[x] Add tests [x] Add code coverage [x] Improve documentation [ ] Include more tests See the open issues for a full list of proposed features (and known issues). ( back to top )","title":"Roadmap"},{"location":"readme.html#contributing","text":"Any contributions you make are greatly appreciated . If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again! Fork the Project Create your Feature Branch ( git checkout -b feature/AmazingFeature ) Commit your Changes ( git commit -m 'Add some AmazingFeature' ) Push to the Branch ( git push origin feature/AmazingFeature ) Open a Pull Request ( back to top )","title":"Contributing"},{"location":"readme.html#contact","text":"Eric Lopes - @nullhack - nullhack@users.noreply.github.com Project Link: https://github.com/nullhack/python-project-example/ ( back to top )","title":"Contact"},{"location":"readme.html#acknowledgments","text":"This project was created using cookiecutter and NullHack's python-project-template: NullHack's python-project-template ( back to top )","title":"Acknowledgments"},{"location":"readme.html#license","text":"Distributed under the MIT License. See LICENSE for more information. ( back to top )","title":"License"},{"location":"api/python_package_example.html","text":"package python_package_example </> Python template with some awesome tools to quickstart any Python project. module python_package_example . python_module_example </> Module Docstring. Classes Calculator \u2014 Class for simple calculator operations. </>","title":"python_package_example"},{"location":"api/python_package_example.html#python_package_example","text":"</> Python template with some awesome tools to quickstart any Python project. module","title":"python_package_example"},{"location":"api/python_package_example.html#python_package_examplepython_module_example","text":"</> Module Docstring. Classes Calculator \u2014 Class for simple calculator operations. </>","title":"python_package_example.python_module_example"},{"location":"api/python_package_example.python_module_example.html","text":"module python_package_example . python_module_example </> Module Docstring. Classes Calculator \u2014 Class for simple calculator operations. </> class python_package_example.python_module_example . Calculator ( ) </> Class for simple calculator operations. Methods divide ( a , b ) (float) \u2014 Divide a by b. </> staticmethod divide ( a , b ) </> Divide a by b. Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. Returns (float) The result of the division. Raises TypeError \u2014 if a or b are not float numbers. ZeroDivisionError \u2014 if b is 0. Examples You can run this function as following. >>> Calculator.divide(2,1) 2.0","title":"python_package_example.python_module_example"},{"location":"api/python_package_example.python_module_example.html#python_package_examplepython_module_example","text":"</> Module Docstring. Classes Calculator \u2014 Class for simple calculator operations. </> class","title":"python_package_example.python_module_example"},{"location":"api/python_package_example.python_module_example.html#python_package_examplepython_module_examplecalculator","text":"</> Class for simple calculator operations. Methods divide ( a , b ) (float) \u2014 Divide a by b. </> staticmethod","title":"python_package_example.python_module_example.Calculator"},{"location":"api/python_package_example.python_module_example.html#python_package_examplepython_module_examplecalculatordivide","text":"</> Divide a by b. Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. Returns (float) The result of the division. Raises TypeError \u2014 if a or b are not float numbers. ZeroDivisionError \u2014 if b is 0. Examples You can run this function as following. >>> Calculator.divide(2,1) 2.0","title":"python_package_example.python_module_example.Calculator.divide"},{"location":"api/source/python_package_example.html","text":"SOURCE CODE python_package_example DOCS \"\"\"Python template with some awesome tools to quickstart any Python project.\"\"\"","title":"python_package_example"},{"location":"api/source/python_package_example.python_module_example.html","text":"SOURCE CODE python_package_example. python_module_example DOCS \"\"\"Module Docstring.\"\"\" import logging # TODO(Eric Lopes): Check how to write todos! # https://github.com/nullhack/python-project-example/issues/1337 logger = logging . getLogger ( \"python_module_example\" ) logger . info ( \"This is a {word} \" , extra = { \"word\" : \"Log\" }) class Calculator : DOCS \"\"\"Class for simple calculator operations.\"\"\" @staticmethod DOCS def divide ( a : float , b : float ) -> float : \"\"\"Divide a by b. Args: a (float): Dividend. b (float): Divisor. Returns: float: The result of the division. Raises: ZeroDivisionError: if b is 0. TypeError: if a or b are not float numbers. Examples: You can run this function as following. >>> Calculator.divide(2,1) 2.0 \"\"\" if b == 0 : raise ZeroDivisionError elif type ( a ) not in ( float , int ) or type ( b ) not in ( float , int ): raise TypeError return a / b if __name__ == \"__main__\" : print ( \"RUNNING!\" )","title":"python_package_example.python_module_example"},{"location":"scenarios/simple_calculation.html","text":"Feature: divide The user should be able to divide two numbers. Scenario Outline: Divide 'a' by 'b' Given I have two numbers <a> and <b> When I divide <a> by <b> Then I should see <output> Examples: | a | b | output | | 2.0 | 2.0 | 1.0 | | 6.0 | 2.0 | 3.0 | | 1.0 | 2.0 | 0.5 |","title":"Simple calculation"},{"location":"scenarios/simple_calculation.html#feature-divide","text":"The user should be able to divide two numbers.","title":"Feature: divide"},{"location":"scenarios/simple_calculation.html#scenario-outline-divide-a-by-b","text":"Given I have two numbers <a> and <b> When I divide <a> by <b> Then I should see <output> Examples: | a | b | output | | 2.0 | 2.0 | 1.0 | | 6.0 | 2.0 | 3.0 | | 1.0 | 2.0 | 0.5 |","title":"Scenario Outline: Divide 'a' by 'b'"},{"location":"tests/tests.html","text":"package tests </> Tests module. module tests . python_package_example_test </> This file contains examples of how to write tests using pytest! Some good practices for writting great Python tests: Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/ Prefer mocker over mock Parametrize the same behavior, have different tests for different behaviors Don\u2019t modify fixture values in other fixtures Prefer responses over mocking outbound HTTP requests Prefer tmpdir over global test artifacts Classes TestGroup \u2014 A class with common parameters, param1 and param2 . </> Functions test_divide_error ( a , b , expected ) \u2014 Check if divide returns correct Exceptions for known entries. </> test_divide_ok ( a , b , expected ) \u2014 Check if divide works for expected entries. </>","title":"tests"},{"location":"tests/tests.html#tests","text":"</> Tests module. module","title":"tests"},{"location":"tests/tests.html#testspython_package_example_test","text":"</> This file contains examples of how to write tests using pytest! Some good practices for writting great Python tests: Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/ Prefer mocker over mock Parametrize the same behavior, have different tests for different behaviors Don\u2019t modify fixture values in other fixtures Prefer responses over mocking outbound HTTP requests Prefer tmpdir over global test artifacts Classes TestGroup \u2014 A class with common parameters, param1 and param2 . </> Functions test_divide_error ( a , b , expected ) \u2014 Check if divide returns correct Exceptions for known entries. </> test_divide_ok ( a , b , expected ) \u2014 Check if divide works for expected entries. </>","title":"tests.python_package_example_test"},{"location":"tests/tests.python_package_example_test.html","text":"module tests . python_package_example_test </> This file contains examples of how to write tests using pytest! Some good practices for writting great Python tests: Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/ Prefer mocker over mock Parametrize the same behavior, have different tests for different behaviors Don\u2019t modify fixture values in other fixtures Prefer responses over mocking outbound HTTP requests Prefer tmpdir over global test artifacts Classes TestGroup \u2014 A class with common parameters, param1 and param2 . </> Functions test_divide_error ( a , b , expected ) \u2014 Check if divide returns correct Exceptions for known entries. </> test_divide_ok ( a , b , expected ) \u2014 Check if divide works for expected entries. </> class tests.python_package_example_test . TestGroup ( ) </> A class with common parameters, param1 and param2 . Methods fixt ( ) (int) \u2014 This fixture will only be available within the scope of TestGroup. </> test_one ( param1 , param2 , fixt ) \u2014 Run the first test using the fixture. </> method fixt ( ) </> This fixture will only be available within the scope of TestGroup. Returns (int) A common value to be used by multiple tests method test_one ( param1 , param2 , fixt ) </> Run the first test using the fixture. Parameters param1 (str) \u2014 First parameter. param2 (str) \u2014 Second parameter. fixt (int) \u2014 Value from fixture. function tests.python_package_example_test . test_divide_ok ( a , b , expected ) </> Check if divide works for expected entries. Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. expected (float) \u2014 expected result. function tests.python_package_example_test . test_divide_error ( a , b , expected ) </> Check if divide returns correct Exceptions for known entries. Issue raised by https://github.com/nullhack/python-project-example/issues/1337 Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. expected (Exception) \u2014 expected Exception.","title":"tests.python_package_example_test"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_test","text":"</> This file contains examples of how to write tests using pytest! Some good practices for writting great Python tests: Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/ Prefer mocker over mock Parametrize the same behavior, have different tests for different behaviors Don\u2019t modify fixture values in other fixtures Prefer responses over mocking outbound HTTP requests Prefer tmpdir over global test artifacts Classes TestGroup \u2014 A class with common parameters, param1 and param2 . </> Functions test_divide_error ( a , b , expected ) \u2014 Check if divide returns correct Exceptions for known entries. </> test_divide_ok ( a , b , expected ) \u2014 Check if divide works for expected entries. </> class","title":"tests.python_package_example_test"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_testtestgroup","text":"</> A class with common parameters, param1 and param2 . Methods fixt ( ) (int) \u2014 This fixture will only be available within the scope of TestGroup. </> test_one ( param1 , param2 , fixt ) \u2014 Run the first test using the fixture. </> method","title":"tests.python_package_example_test.TestGroup"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_testtestgroupfixt","text":"</> This fixture will only be available within the scope of TestGroup. Returns (int) A common value to be used by multiple tests method","title":"tests.python_package_example_test.TestGroup.fixt"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_testtestgrouptest_one","text":"</> Run the first test using the fixture. Parameters param1 (str) \u2014 First parameter. param2 (str) \u2014 Second parameter. fixt (int) \u2014 Value from fixture. function","title":"tests.python_package_example_test.TestGroup.test_one"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_testtest_divide_ok","text":"</> Check if divide works for expected entries. Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. expected (float) \u2014 expected result. function","title":"tests.python_package_example_test.test_divide_ok"},{"location":"tests/tests.python_package_example_test.html#testspython_package_example_testtest_divide_error","text":"</> Check if divide returns correct Exceptions for known entries. Issue raised by https://github.com/nullhack/python-project-example/issues/1337 Parameters a (float) \u2014 Dividend. b (float) \u2014 Divisor. expected (Exception) \u2014 expected Exception.","title":"tests.python_package_example_test.test_divide_error"},{"location":"tests/source/tests.html","text":"SOURCE CODE tests DOCS \"\"\"Tests module.\"\"\"","title":"tests"},{"location":"tests/source/tests.python_package_example_test.html","text":"SOURCE CODE tests. python_package_example_test DOCS \"\"\"This file contains examples of how to write tests using pytest! Some good practices for writting great Python tests: Source: https://www.nerdwallet.com/blog/engineering/5-pytest-best-practices/ * Prefer mocker over mock * Parametrize the same behavior, have different tests for different behaviors * Don\u2019t modify fixture values in other fixtures * Prefer responses over mocking outbound HTTP requests * Prefer tmpdir over global test artifacts \"\"\" from typing import TypeVar import pytest from python_package_example import python_module_example as m Self = TypeVar ( \"Self\" , bound = \"TestGroup\" ) @pytest . mark . parametrize ( DOCS ( \"param1\" , \"param2\" ), [ ( \"a\" , \"b\" ), ( \"c\" , \"d\" ), ], ) class TestGroup : \"\"\"A class with common parameters, `param1` and `param2`.\"\"\" @pytest . fixture () DOCS def fixt ( self : Self ) -> int : \"\"\"This fixture will only be available within the scope of TestGroup. Returns: int: A common value to be used by multiple tests \"\"\" return 123 def test_one ( self : Self , param1 : str , param2 : str , fixt : int ) -> None : DOCS \"\"\"Run the first test using the fixture. Args: param1 (str): First parameter. param2 (str): Second parameter. fixt (int): Value from fixture. \"\"\" print ( \" \\n test_one\" , param1 , param2 , fixt ) @pytest . mark . parametrize ( DOCS ( \"a\" , \"b\" , \"expected\" ), [ ( 1 , 1 , 1 ), ( 42 , 1 , 42 ), ( 84 , 2 , 42 ), ], ) def test_divide_ok ( a : float , b : float , expected : float ) -> None : \"\"\"Check if divide works for expected entries. Args: a (float): Dividend. b (float): Divisor. expected (float): expected result. \"\"\" assert m . Calculator . divide ( a , b ) == expected @pytest . mark . parametrize ( DOCS ( \"a\" , \"b\" , \"expected\" ), [ ( 42 , \"b\" , TypeError ), ( \"a\" , 42 , TypeError ), ( 42 , 0 , ZeroDivisionError ), ], ) def test_divide_error ( a : str | float , b : str | float , expected : float | Exception ) -> None : \"\"\"Check if divide returns correct Exceptions for known entries. Issue raised by https://github.com/nullhack/python-project-example/issues/1337 Args: a (float): Dividend. b (float): Divisor. expected (Exception): expected Exception. \"\"\" with pytest . raises ( expected ): m . Calculator . divide ( a , b )","title":"tests.python_package_example_test"}]}